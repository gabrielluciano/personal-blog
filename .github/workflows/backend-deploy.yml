name: Personal Blog Backend Test and Deploy CI

on:
  push:
    branches: ["main"]
    paths:
      - "backend/**"
      - "aws/**"
      - "appspec.yml"
  workflow_dispatch:
      
env:
  API_SECRET: secret
  APP_FOLDER: backend
  AWS_REGION: us-east-2

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: Github-Action-Role

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Run unit tests
        working-directory: ${{ env.APP_FOLDER }}
        run: mvn -B test

      - name: Run integration tests
        working-directory: ${{ env.APP_FOLDER }}
        run: mvn test -B -P integration-tests

      - name: Build and Package
        working-directory: ${{ env.APP_FOLDER }}
        run: mvn clean package -DskipTests -Dspring-boot.run.profiles=prod

      - name: Create tgz bundle for deployment
        working-directory: ${{ env.APP_FOLDER }}
        run: |
          mv target/*.jar target/app.jar
          tar -czvf bundle.tar.gz Dockerfile docker-compose.prod.yml target/app.jar

      - name: Upload Bundle to s3
        working-directory: ${{ env.APP_FOLDER }}
        run: |
          aws s3 cp bundle.tar s3://${{ secrets.PROD_S3_BUCKET }}/bundle.tar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.IAMROLE_GITHUB }}
          role-session-name: Github-Action-Role

      - name: Create Deployment with AWS CodeDeploy
        run: |
          aws deploy create-deployment --application-name PersonalBlog --deployment-group-name PersonalBlogDeployGroup --s3-location bucket=${{ secrets.PROD_S3_BUCKET }},key=bundle,bundleType=tgz --ignore-application-stop-failures
